package org.example;

import conflux.web3j.Account;
import conflux.web3j.Cfx;
import conflux.web3j.contract.ContractCall;
import conflux.web3j.contract.ERC721;
import conflux.web3j.contract.internals.AdminControl;
import conflux.web3j.response.Receipt;
import conflux.web3j.types.Address;
import conflux.web3j.types.CfxAddress;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;

import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.Optional;

/**
 * ERC721 ABI:
 *
 * ======== methods:
 * balanceOf(owner)
 * ownerOf(tokenId)
 * safeTransferFrom(from, to, tokenId, data)
 * safeTransferFrom(from, to, tokenId)
 * transferFrom(from, to, tokenId)
 * approve(to, tokenId)
 * setApprovalForAll(operator, _approved)
 * getApproved(tokenId)
 * isApprovedForAll(owner, operator)
 *
 * ======== Events:
 * Transfer(from, to, tokenId)
 * Approval(owner, approved, tokenId)
 * ApprovalForAll(owner, operator, approved)
 *
 * ======== Metadata extension:
 * name()
 * symbol()
 * tokenURI(tokenId)
 *
 * */

public class ContractInteraction {

    public static String erc721Bytecode = "0x608060405234801561001057600080fd5b50611d00806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806342966c681161007157806342966c68146101895780636352211e146101a557806370a08231146101d5578063a22cb46514610205578063b88d4fde14610221578063e985e9c51461023d576100b4565b806301ffc9a7146100b9578063081812fc146100e9578063095ea7b31461011957806323b872dd1461013557806340c10f191461015157806342842e0e1461016d575b600080fd5b6100d360048036038101906100ce9190611271565b61026d565b6040516100e091906112b9565b60405180910390f35b61010360048036038101906100fe919061130a565b61033f565b6040516101109190611378565b60405180910390f35b610133600480360381019061012e91906113bf565b61041c565b005b61014f600480360381019061014a91906113ff565b610562565b005b61016b600480360381019061016691906113bf565b6105cb565b005b610187600480360381019061018291906113ff565b6107e2565b005b6101a3600480360381019061019e919061130a565b610802565b005b6101bf60048036038101906101ba919061130a565b610906565b6040516101cc9190611378565b60405180910390f35b6101ef60048036038101906101ea9190611452565b6109b1565b6040516101fc919061148e565b60405180910390f35b61021f600480360381019061021a91906114d5565b610a68565b005b61023b6004803603810190610236919061165b565b610b65565b005b610257600480360381019061025291906116de565b610bd0565b60405161026491906112b9565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061033857507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036103e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d89061177b565b60405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105135750600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610552576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610549906117e7565b60405180910390fd5b61055d818484610c64565b505050565b600061056d82610906565b905061057a813384610d16565b6105b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b090611853565b60405180910390fd5b6105c581858585610e4a565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361063a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610631906118bf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d29061192b565b60405180910390fd5b60018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461072a919061197a565b925050819055508160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6107fd83838360405180602001604052806000815250610b65565b505050565b600061080d82610906565b905061081b81600084610c64565b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461086a91906119d0565b9250508190555060008083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a39061177b565b60405180910390fd5b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1890611a50565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610b5991906112b9565b60405180910390a35050565b6000610b7083610906565b9050610b7d813385610d16565b610bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb390611853565b60405180910390fd5b610bc98186868686611091565b5050505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60008373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610db057508273ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80610e415750600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b90509392505050565b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610eb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eaf90611abc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1e90611b28565b60405180910390fd5b610f3384600083610c64565b60018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f8291906119d0565b9250508190555060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fd8919061197a565b925050819055508160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b61109d85858585610e4a565b6110a9848484846110ef565b6110e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110df90611b94565b60405180910390fd5b5050505050565b60006111108473ffffffffffffffffffffffffffffffffffffffff166111f2565b156111e55763150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff1660e01b815260040161117b9493929190611c3c565b6020604051808303816000875af115801561119a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111be9190611c9d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161490506111ea565b600190505b949350505050565b600080823b905060008111915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61124e81611219565b811461125957600080fd5b50565b60008135905061126b81611245565b92915050565b6000602082840312156112875761128661120f565b5b60006112958482850161125c565b91505092915050565b60008115159050919050565b6112b38161129e565b82525050565b60006020820190506112ce60008301846112aa565b92915050565b6000819050919050565b6112e7816112d4565b81146112f257600080fd5b50565b600081359050611304816112de565b92915050565b6000602082840312156113205761131f61120f565b5b600061132e848285016112f5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061136282611337565b9050919050565b61137281611357565b82525050565b600060208201905061138d6000830184611369565b92915050565b61139c81611357565b81146113a757600080fd5b50565b6000813590506113b981611393565b92915050565b600080604083850312156113d6576113d561120f565b5b60006113e4858286016113aa565b92505060206113f5858286016112f5565b9150509250929050565b6000806000606084860312156114185761141761120f565b5b6000611426868287016113aa565b9350506020611437868287016113aa565b9250506040611448868287016112f5565b9150509250925092565b6000602082840312156114685761146761120f565b5b6000611476848285016113aa565b91505092915050565b611488816112d4565b82525050565b60006020820190506114a3600083018461147f565b92915050565b6114b28161129e565b81146114bd57600080fd5b50565b6000813590506114cf816114a9565b92915050565b600080604083850312156114ec576114eb61120f565b5b60006114fa858286016113aa565b925050602061150b858286016114c0565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115688261151f565b810181811067ffffffffffffffff8211171561158757611586611530565b5b80604052505050565b600061159a611205565b90506115a6828261155f565b919050565b600067ffffffffffffffff8211156115c6576115c5611530565b5b6115cf8261151f565b9050602081019050919050565b82818337600083830152505050565b60006115fe6115f9846115ab565b611590565b90508281526020810184848401111561161a5761161961151a565b5b6116258482856115dc565b509392505050565b600082601f83011261164257611641611515565b5b81356116528482602086016115eb565b91505092915050565b600080600080608085870312156116755761167461120f565b5b6000611683878288016113aa565b9450506020611694878288016113aa565b93505060406116a5878288016112f5565b925050606085013567ffffffffffffffff8111156116c6576116c5611214565b5b6116d28782880161162d565b91505092959194509250565b600080604083850312156116f5576116f461120f565b5b6000611703858286016113aa565b9250506020611714858286016113aa565b9150509250929050565b600082825260208201905092915050565b7f746f6b656e20646f65736e277420657869737400000000000000000000000000600082015250565b600061176560138361171e565b91506117708261172f565b602082019050919050565b6000602082019050818103600083015261179481611758565b9050919050565b7f6e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c0000600082015250565b60006117d1601e8361171e565b91506117dc8261179b565b602082019050919050565b60006020820190508181036000830152611800816117c4565b9050919050565b7f6e6f74206f776e6572206e6f7220617070726f76656400000000000000000000600082015250565b600061183d60168361171e565b915061184882611807565b602082019050919050565b6000602082019050818103600083015261186c81611830565b9050919050565b7f6d696e7420746f207a65726f2061646472657373000000000000000000000000600082015250565b60006118a960148361171e565b91506118b482611873565b602082019050919050565b600060208201905081810360008301526118d88161189c565b9050919050565b7f746f6b656e20616c7265616479206d696e746564000000000000000000000000600082015250565b600061191560148361171e565b9150611920826118df565b602082019050919050565b6000602082019050818103600083015261194481611908565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611985826112d4565b9150611990836112d4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119c5576119c461194b565b5b828201905092915050565b60006119db826112d4565b91506119e6836112d4565b9250828210156119f9576119f861194b565b5b828203905092915050565b7f6f776e6572203d207a65726f2061646472657373000000000000000000000000600082015250565b6000611a3a60148361171e565b9150611a4582611a04565b602082019050919050565b60006020820190508181036000830152611a6981611a2d565b9050919050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000611aa660098361171e565b9150611ab182611a70565b602082019050919050565b60006020820190508181036000830152611ad581611a99565b9050919050565b7f7472616e7366657220746f20746865207a65726f206164647265737300000000600082015250565b6000611b12601c8361171e565b9150611b1d82611adc565b602082019050919050565b60006020820190508181036000830152611b4181611b05565b9050919050565b7f6e6f742045524337323152656365697665720000000000000000000000000000600082015250565b6000611b7e60128361171e565b9150611b8982611b48565b602082019050919050565b60006020820190508181036000830152611bad81611b71565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bee578082015181840152602081019050611bd3565b83811115611bfd576000848401525b50505050565b6000611c0e82611bb4565b611c188185611bbf565b9350611c28818560208601611bd0565b611c318161151f565b840191505092915050565b6000608082019050611c516000830187611369565b611c5e6020830186611369565b611c6b604083018561147f565b8181036060830152611c7d8184611c03565b905095945050505050565b600081519050611c9781611245565b92915050565b600060208284031215611cb357611cb261120f565b5b6000611cc184828501611c88565b9150509291505056fea2646970667358221220b424679165776e988943a7da0c7e2642bda8eeb13df4c53fd517cd2715e6c90c64736f6c634300080d0033";
    /*
     * Deploy hash: 0x30b27b3660e8db58faa40a4b3302d38f9339f3ff566da1ce250657a74f5a389d
     * */
    public static String nftAddress = "cfxtest:acg7s1ss9zkrc47cyaahaw40ksj7wmvvg6uk2me767";

    public static void run(Cfx cfx, Account account) throws Exception {
        System.out.println("NFT(721) contract interaction example: ");
        playNFT(cfx, account);
//        transfer(cfx, account);
    }

    public static void deployContract(Cfx cfx, Account account) throws Exception {
        String hash = account.deploy(erc721Bytecode);
        System.out.println("deploy hash: " + hash);
        // If the contract's constructor has parameters
//        String hash = account.deploy(erc721Bytecode, new Uint256(123));
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();
        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
        }
        // Specify contract

    }

    public static void contractCall(Cfx cfx) {
        Address contractAddr = new Address("cfxtest:aame568esrpusxku1c449939ntrx2j0rxpmm5ge874");
        ContractCall cc = new ContractCall(cfx, contractAddr);
        BigInteger totalSupply = cc.callAndGet(Uint256.class,"totalSupply");
        String name = cc.callAndGet(Utf8String.class, "name");
    }

    public static String mintNFT(Account minter, Address receiver, BigInteger tokenId) throws Exception {
        String hash = minter.call(new CfxAddress(nftAddress), "mint", receiver.getABIAddress(), new Uint256(tokenId));
        System.out.println("mint hash: " + hash);
        return hash;
    }

    public static void buildinContractExample(Cfx cfx) {
        AdminControl ac = new AdminControl(cfx);
    }

    public static void playNFT(Cfx cfx, Account account) throws Exception {
        ERC721 erc721 = new ERC721(cfx, new CfxAddress(nftAddress), account);

        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        BigInteger tokenId = BigInteger.valueOf(timestamp.getTime());

        String mintHash = mintNFT(account, account.getAddress(), tokenId);

        cfx.waitForReceipt(mintHash);

        BigInteger count = erc721.balanceOf(account.getHexAddress());
        System.out.println(count);

        String owner = erc721.ownerOf(tokenId);
        System.out.printf("Owner of token %d is %s \n", tokenId, owner);

        Address receiver = new Address(Contants.anotherAddress);

        Account.Option op = new Account.Option();
        String transferHash = erc721.safeTransferFrom(op, account.getAddress().getABIAddress(), receiver.getABIAddress(), tokenId);
        System.out.printf("Token %d transfer to %s hash:%s \n", tokenId, Contants.anotherAddress, transferHash);

        cfx.waitForReceipt(transferHash);

        BigInteger receiverCount = erc721.balanceOf(receiver.getHexAddress());
        System.out.printf("Receiver NFT count %d", receiverCount);

        /*String nftname = erc721.name();
        System.out.printf("NFT name %s \n", nftname);

        String symbol = erc721.symbol();
        System.out.printf("NFT symbol %s \n", symbol);*/
    }

    public static void transfer(Cfx cfx, Account account) throws Exception {
        ERC721 erc721 = new ERC721(cfx, new CfxAddress(nftAddress), account);
        int tokenId = 1;
        Account.Option op = new Account.Option();
        String hash = erc721.safeTransferFrom(op, account.getAddress().getABIAddress(), new Address(Contants.anotherAddress).getABIAddress(), BigInteger.valueOf(tokenId));
        System.out.printf("Token %d transfer to %s hash %s \n", tokenId, Contants.anotherAddress, hash);
    }
}
